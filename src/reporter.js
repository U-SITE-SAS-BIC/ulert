// src/reporter.js

const fs = require('fs').promises;
const path = require('path');

// Reporte en consola
function cli(result) {
  console.log("✅ HTTP:", result.http.ok ? "Online" : "Offline");
  console.log("⚡ Load Time:", result.http.loadTime ? `${result.http.loadTime}ms` : "N/A");
  console.log("🔗 Links:", `${result.links.total} links, ${result.links.broken} broken`);
  console.log("🛡️  Security:", result.security.score, "checks passed");

  if (result.links.brokenList?.length > 0) {
    console.log("\n❌ Broken links found:");
    result.links.brokenList.forEach(link => console.log("  -", link));
  }
}

// Genera y guarda reporte HTML
async function html(result, filePath) {
  const reportDir = path.dirname(filePath);
  const fileName = path.basename(filePath);

  // Asegurarse de que la carpeta exista
  try {
    await fs.access(reportDir);
  } catch {
    await fs.mkdir(reportDir, { recursive: true });
  }

  const report = `
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Ulert Report - ${result.url}</title>
  <style>
    body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; padding: 40px; max-width: 900px; margin: 0 auto; line-height: 1.6; }
    h1, h2 { color: #1a1a1a; }
    .badge { padding: 4px 8px; border-radius: 4px; font-size: 0.85em; }
    .success { background: #d4edda; color: #155724; }
    .error { background: #f8d7da; color: #721c24; }
    .warning { background: #fff3cd; color: #856404; }
    ul { padding-left: 20px; }
    pre { background: #f5f5f5; padding: 10px; border-radius: 5px; overflow: auto; }
  </style>
</head>
<body>
  <h1>🔐 Ulert Security & Health Report</h1>
  <p><strong>Site:</strong> <a href="${result.url}" target="_blank">${result.url}</a></p>
  <p><strong>Date:</strong> ${new Date(result.timestamp).toLocaleString()}</p>

  <h2>🌐 HTTP Status</h2>
  <p class="badge ${result.http.ok ? 'success' : 'error'}">
    ${result.http.ok ? '✅ Online (200)' : '❌ Offline'}
  </p>
  <p><strong>Load Time:</strong> ${result.http.loadTime ? `${result.http.loadTime}ms` : 'Failed'}</p>

  <h2>🔗 Link Audit</h2>
  <p>Total internal links: ${result.links.total}</p>
  <p>Broken links: <span class="badge ${result.links.broken > 0 ? 'error' : 'success'}">${result.links.broken}</span></p>
  ${result.links.brokenList && result.links.brokenList.length > 0 ? `
    <details>
      <summary>View broken links</summary>
      <ul>
        ${result.links.brokenList.map(link => `<li><span class="badge error">404</span> ${link}</li>`).join('')}
      </ul>
    </details>
  ` : '<p>No broken links found.</p>'}

  <h2>🛡️ Security Headers</h2>
  <ul>
    ${Object.entries(result.security.checks).map(([header, passed]) => `
      <li>
        <strong>${header}</strong>: 
        <span class="badge ${passed ? 'success' : 'error'}">${passed ? '✅ Present' : '❌ Missing'}</span>
      </li>
    `).join('')}
  </ul>
  <p><em>Report generated by <a href="https://u-site.app" target="_blank">u-site.app</a> — Open source website tools.</em></p>
</body>
</html>
  `;

  try {
    await fs.writeFile(filePath, report, 'utf-8');
    console.log(`📄 HTML report saved to ${filePath}`);
  } catch (err) {
    console.error("❌ Failed to save HTML report:", err.message);
  }
}

module.exports = { cli, html };